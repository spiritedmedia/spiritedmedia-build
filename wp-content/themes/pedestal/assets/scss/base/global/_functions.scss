// ==========================================================================
// Pedestal // Base // Global // FUNCTIONS
// ==========================================================================


@import 'functions-type-checking';


//
// Units
// ==========================================================================


/// Strip the unit from a number
///
/// @param {number} $num
@function strip-unit( $num ) {
  @return $num / ( $num * 0 + 1 );
}

/// Helper function for rem()
///
/// Does calculation for individual unit conversion
///
/// @param {number} $value - Single pixel value to convert to rem
/// @param {number} $base-value [$rem-base] - Base rem calculation off this unit
@function _convert-to-rem( $value, $base-value: $rem-base ) {
  $value: strip-unit( $value ) / strip-unit( $base-value ) * 1rem;
  // stylelint-disable-next-line length-zero-no-unit
  @if ( $value == 0rem ) {
    $value: 0;
  }
  @return $value;
}

/// Convert pixels to rems
///
/// Call with 1, 2, 3 or 4 parameters -- px is not required but suggested.
///
///   rem(10 20 30px 40);
///
/// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
///
///   rem((10, 20, 30, 40px));
///
/// Optionally call with a different base (eg: 8px) to calculate rem.
///
///   rem(16px 32px 48px, 8px);
///
/// @require {function} _convert-to-rem
/// @param {number|list} $values - Pixel values to convert to rem, can be up to 4
/// @param {number}      $base-value [$rem-base] - Base rem calculation off this unit
/// @return {number|list} Single rem, list of rems, or zero
@function rem( $values, $base-value: $rem-base ) {
  $max: length( $values );

  @if $max == 1 {
    @return _convert-to-rem( nth( $values, 1 ), $base-value );
  }

  $rem-values: ();
  @for $i from 1 through $max {
    $rem-values: append( $rem-values, _convert-to-rem( nth( $values, $i ), $base-value ) );
  }
  @return $rem-values;
}

/// Convert pixels to ems
///
/// See documentation for `rem()`
///
/// @require {function} strip-unit
/// @require {function} rem
/// @see {function} rem
@function em( $values, $base-value: $rem-base ) {
  $rem-values: rem( $values, $base-value );

  $max: length( $rem-values );

  @if $max == 1 {
    @return strip-unit( nth( $rem-values, 1 ) ) * 1em;
  }

  $em-values: ();
  @for $i from 1 through $max {
    $em-values: append( $em-values, strip-unit( nth( $rem-values, $i ) ) * 1em );
  }
  @return $em-values;
}

/// Clamp `$number` between `$min` and `$max`
///
/// @link https://css-tricks.com/snippets/sass/clamping-number/
///
/// @param {Number} $number - Number to clamp
/// @param {Number} $min - Minimum value
/// @param {Number} $max - Maximum value
/// @return {Number}
@function clamp($number, $min, $max) {
  @return min(max($number, $min), $max);
}





/**
 * Convert each value in a map of units or numbers to rems
 *
 * @param  {map} $map Map where each value is a unit or number
 * @return {map}
 */
@function rem-map-values( $map ) {
  $new-map: ();
  @each $key, $value in $map {
    @if ( number == type-of( $value ) ) {
      $new-map: map-merge( $new-map, ( $key: rem( $value ) ) );
    }
  }
  @return $new-map;
}





//
// Colors
// ==========================================================================


/// Calculate text color with sufficient contrast against a given background color
///
/// @param  {color} $bg - $primary-color - Background color
/// @param  {color} $text-light - $white
/// @param  {color} $text-dark - $body-font-color
/// @param  {percent} $threshold - Lightness threshold
@function text-contrast(
  $bg: $primary-color,
  $text-light: $white,
  $text-dark: $body-font-color,
  $threshold: 65%
) {
  @return if( lightness( $bg ) > $threshold, $text-dark, $text-light );
}





//
// Maps
// ==========================================================================


/**
 * `map-get()` with error checking
 *
 * @param  {map}    $map
 * @param  {string} $key
 * @return {mixed}
 */
@function map-get-strict( $map, $key ) {
  @if map-has-key( $map, $key ) {
    @return map-get( $map, $key );
  } @else {
    @error 'ERROR: Specified index `#{$key}` does not exist in the map `#{$map}`!';
  }
}


/**
 * Get value from nested map
 *
 * @author Hugo Giraudel
 *
 * @param  {map}     $map
 * @param  {arglist} $keys key chain
 * @return {*}             Desired value
 */
@function map-fetch( $map, $keys... ) {
  @each $key in $keys {
    $map: map-get-strict( $map, $key );
  }
  @return $map;
}


/// Get the prescribed width of an icon
///
/// IcoMoon generates specific em widths for each icon we use.
///
/// @param {string} $icon Icon name
/// @return {unit}        Icon width in ems
@function icon-width-get( $icon ) {
  @return map-get-strict( $icon-widths, $icon );
}





//
// Strings
// ==========================================================================


/**
 * Replace `$search` with `$replace` in `$string`
 *
 * @author Hugo Giraudel
 *
 * http://sassmeister.com/gist/1b4f2da5527830088e4d
 *
 * @param {string}  $string         Initial string
 * @param {string}  $search         Substring to replace
 * @param {string}  $replace ( '' ) New value
 * @return {string}                 Updated string
 */
@function str-replace( $string, $search, $replace: '' ) {
  $index: str-index( $string, $search );

  @if $index {
    @return str-slice( $string, 1, $index - 1 ) + $replace + str-replace( str-slice( $string, $index + str-length( $search ) ), $search, $replace );
  }

  @return $string;
}





// ==========================================================================
// Spirited Media Config Data
// ==========================================================================


/**
 * Get a map of the rem dimensions for image sizes
 *
 * @param  {string} $size Optional name of a WP image size to get dimension map
 * @return {map}
 */
@function sm-pedestal-img-sizes-get( $size: null ) {
  $new-sizes: ();

  @if ( $size != null and string == type-of( $size ) ) {
    $dimensions: map-fetch( $spiritedmedia-pedestal, imageSizes, $size );
    @return rem-map-values( $dimensions );
  } @else {
    $sizes: map-fetch( $spiritedmedia-pedestal, imageSizes );
    @each $size, $dimensions in $sizes {
      $new-dims: rem-map-values( $dimensions );
      $new-sizes: map-merge( $new-sizes, ( $size: $new-dims ) );
    }
    @return $new-sizes;
  }
}
