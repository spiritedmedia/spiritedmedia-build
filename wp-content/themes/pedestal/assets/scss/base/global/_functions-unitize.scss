// ==========================================================================
// Pedestal // Base // Global // FUNCTIONS: UNITIZE
//
// These functions are re-imported each time new base units are loaded.
// ==========================================================================


/**
 * Convert a single unit or value to a specified output unit
 *
 * @param  {unit|int} $value       A unit or unitless value
 * @param  {unit}     $base-value  The base to calculate ratio
 * @param  {unit}     $output-unit A unit whose unit should determine the output unit
 * @return {unit}
 */
@function unitize-calc(
  $value,
  $base-value,
  $output-unit
) {

  $new-value: null;
  $value-unit: unit( $value );
  $output-unit-unit: unit( $output-unit );

  @if $value-unit == $output-unit-unit {
    $new-value: strip-unit( $value );
  }

  @if not $new-value {

    @if 'rem' == $value-unit {
      @if 'px' == $output-unit-unit {
        $new-value: strip-unit( $value ) * strip-unit( $base-value );
      }
    } @elseif 'px' == $value-unit or '' == $value-unit {
      @if 'rem' == $output-unit-unit {
        $new-value: convert-to-rem( $value, $base-value );
      } @elseif 'px' == $output-unit-unit {
        $new-value: strip-unit( $value );
      }
    }

  }

  @if $new-value {
    @return convert-to-unit( $new-value, $output-unit );
  } @else {
    @error 'The specified unit conversion is not supported at this time. Tried to convert input value (#{$value}) to output unit (#{$output-unit-unit})';
  }

}


/**
 * Convert a list of units or values to use the unit of base spacing unit
 *
 * Similar to Foundation's `convert-to-rem` except that it factors in the unit
 * of $base-spacing-unit
 *
 * @param  {unit|int|list} $value        A unit or unitless value
 * @param  {unit}          $base-value:  $global-base-font-size The base to calculate ratio
 * @param  {unit}          $output-unit: $base-spacing-unit     The base unit to convert to
 * @return {unit|list}
 */
@function unitize(
  $values,
  $base-value: $global-base-font-size,
  $output-unit: $base-spacing-unit
) {
  $max: length( $values );

  @if $max == 1 {
    @return unitize-calc( $values, $base-value, $output-unit );
  }

  $unitized-values: ();
  @for $i from 1 through $max {
    $unitized-values: append( $unitized-values, unitize-calc( nth( $values, $i ), $base-value, $output-unit ) );
  }
  @return $unitized-values;
}


/**
 * Unitize each value in a map of units or numbers
 *
 * @param  {map} $map Map where each value is a unit or number
 * @return {map}
 */
@function unitize-map-values( $map ) {
  $new-map: ();
  @each $key, $value in $map {
    @if ( number == type-of( $value ) ) {
      $new-map: map-merge( $new-map, ( $key: unitize( $value ) ) );
    }
  }
  @return $new-map;
}
