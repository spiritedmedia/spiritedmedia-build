// ==========================================================================
// Pedestal // Base // Theme // MIXINS
// ==========================================================================


/**
 * Break a component out of the bounds of its parent to span viewport width
 *
 * @param  {string} $selector:             '&'                          Selector
 * @param  {unit} $inner-vertical-padding: double( $base-spacing-unit ) Interior vertical padding
 * @param  {unit} $explode-width:          $hoz-explode-side            Blast radius
 */
@mixin explode-component(
  $selector: '&',
  $inner-vertical-padding: double( $base-spacing-unit ),
  $explode-width: $hoz-explode-side
) {

  #{$selector} {
    $margin-top: -( $content-wrapper-m-t + $main-margin-top );
    $margin-hoz: -( $explode-width );

    margin: $margin-top $margin-hoz 0;

    &__inner {
      padding: $inner-vertical-padding $explode-width;
    }
  }
}





//
// Lists
// ==========================================================================


/**
 * Remove standard bullets from `li`
 *
 * Mixin version of Foundation's `.no-bullet`
 *
 * Must be used on a `ul`
 */
@mixin no-bullet {
  // stylelint-disable selector-no-type
  list-style-type: none;
  margin-#{$default-float}: $list-side-margin-no-bullet;


  li {
    ul,
    ol {
      margin-#{$default-float}: $list-nested-margin;
      margin-bottom: 0;
      list-style: none;
    }
  }
  // stylelint-enable selector-no-type
}


/**
 * Remove custom bullets from `li`
 *
 * Must be used on a `ul`
 */
@mixin no-bullet-custom {
  // stylelint-disable selector-no-type, declaration-no-important
  > li::before {
    width: 0 !important;
    height: 0 !important;
  }
  // stylelint-enable selector-no-type, declaration-no-important
}





//
// Typography
// ==========================================================================


/// Generate heading font size styles including size reduction
///
/// Couples Foundation's `$h*-font-size` and `$h*-font-reduction` variables.
///
/// @access public
/// @param {number} $h-level - Heading level number
/// @param {bool}   $do-reduction [true] - Include reduction sizing?
@mixin h-size( $h-level, $do-reduction: true ) {
  @if not is-number( $h-level ) {
    @error 'Parameter `$h-level` with value `#{$h-level}` is not a number!';
  }

  $h-level-cl: clamp( $h-level, 1, 6 );
  @if $h-level-cl != $h-level {
    @error 'Parameter `$h-level` with value `#{$h-level}` is not a valid heading level!';
  }

  $h-size-vars: (
    1: $h1-font-size,
    2: $h2-font-size,
    3: $h3-font-size,
    4: $h4-font-size,
    5: $h5-font-size,
    6: $h6-font-size,
  );

  $h-reduction-vars: (
    1: $h1-font-reduction,
    2: $h2-font-reduction,
    3: $h3-font-reduction,
    4: $h4-font-reduction,
    5: $h5-font-reduction,
    6: $h6-font-reduction,
  );

  $base-size: map-fetch( $h-size-vars, $h-level );
  $size: $base-size;
  @if $do-reduction {
    $size: $size - map-fetch( $h-reduction-vars, $h-level );
  }

  font-size: $size;

  @media #{$medium-up} {
    font-size: $base-size;
  }
}





//
// Icons
// ==========================================================================


/**
 * Generate icons and fallbacks from PNG/SVG
 *
 * @param  {string} $path:        null                Absolute URI path to the icon
 * @param  {unit}   $size:        $icon-diameter--med Size of icons to generate
 * @param  {bool}   $resize-only: false               Set whether to rezize only
 * @param  {bool}   $path-only:   false               Set whether to change path without resizing
 * @param  {bool}   $fallback:    true                Set whether to use SVG
 * @param  {bool}   $live-url:    false               If set, base the image path off the live URL
 */
@mixin iconize(
  $path: '',
  $size: $icon-diameter--med,
  $resize-only: false,
  $path-only: false,
  $fallback: true,
  $live-url: false
) {

  @if $path-only == false {
    width: $size;
    height: $size;
    background-position: center;
    background-size: $size;
    background-repeat: no-repeat;
  }

  @if $resize-only == false {

    @if $path {

      // Normal icons
      $png-path: $path + '.png';
      $svg-path: $path + '.svg';

      @if $live-url {
        $png-path: $site-live-url + $path + '.png';
        $svg-path: $site-live-url + $path + '.svg';
      }

      background-image: url( '#{$png-path}' );

      @if $fallback {
        background-image: url( '#{$svg-path}' );
      }

    }
  }
}





//
// Borders
// ==========================================================================


@mixin border-divider-scaffold(
  $size: 1px,
  $color: $border-std-color,
  $side: 'bottom',
  $spacing: $border-divider-spacing
) {

  @include stdbd( $side );

  padding-#{$side}: $spacing;
  margin-#{$side}: $spacing;

  // Leave orphans alone
  @if 'bottom' == $side or 'right' == $side {
    &:last-child:not( :first-child ) {
      border-#{$side}: none;
      padding-#{$side}: 0;
      margin-#{$side}: 0;
    }
  } @elseif 'top' == $side or 'left' == $side {
    &:first-child:not( :last-child ) {
      border-#{$side}: none;
      padding-#{$side}: 0;
      margin-#{$side}: 0;
    }
  }

}


@mixin border-divider(
  $side: 'bottom',
  $color: $border-divider-color,
  $spacing: $border-divider-spacing,
  $class: true
) {

  @if $class {
    &.has-border--#{$side} {
      @include border-divider-scaffold(
        $side: $side,
        $color: $color,
        $spacing: $spacing
      );
    }
  } @else {
    @include border-divider-scaffold(
      $side: $side,
      $color: $color,
      $spacing: $spacing
    );
  }

}


@mixin inline-divider(
  $side: 'right',
  $color: $border-divider-color,
  $spacing: $border-divider-spacing--inline
) {

  @include border-divider( $side, $color, $spacing, false );
}





//
// Shapes
// ==========================================================================


@mixin corner-triangle( $size: $base-spacing-unit, $color: $primary-color, $corner: 'top-right' ) {
  width: 0;
  height: 0;

  @if $corner == 'top-left' {
    border-top: $size solid $color;
    border-right: $size solid transparent;
  } @else if $corner == 'top-right' {
    border-top: $size solid $color;
    border-left: $size solid transparent;
  } @else if $corner == 'bottom-left' {
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  } @else if $corner == 'bottom-right' {
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
  }

}
